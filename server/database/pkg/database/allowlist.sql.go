// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: allowlist.sql

package database

import (
	"context"
	"net/netip"
)

const addToAllowlist = `-- name: AddToAllowlist :one
INSERT INTO allowlist_entry (cidr, list_id) 
VALUES ($1, $2)
ON CONFLICT (cidr, list_id) 
DO NOTHING
RETURNING id, cidr, list_id
`

type AddToAllowlistParams struct {
	Cidr   netip.Prefix
	ListID int32
}

func (q *Queries) AddToAllowlist(ctx context.Context, arg AddToAllowlistParams) (AllowlistEntry, error) {
	row := q.db.QueryRow(ctx, addToAllowlist, arg.Cidr, arg.ListID)
	var i AllowlistEntry
	err := row.Scan(&i.ID, &i.Cidr, &i.ListID)
	return i, err
}

const createAllowList = `-- name: CreateAllowList :one
INSERT INTO allowlist (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateAllowList(ctx context.Context, name string) (Allowlist, error) {
	row := q.db.QueryRow(ctx, createAllowList, name)
	var i Allowlist
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteAllowList = `-- name: DeleteAllowList :exec
DELETE FROM allowlist
WHERE id = $1
`

func (q *Queries) DeleteAllowList(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAllowList, id)
	return err
}

const listAllLists = `-- name: ListAllLists :many
SELECT id, name
FROM allowlist
WHERE 1=1
AND id > $1
ORDER BY id
LIMIT $2
`

type ListAllListsParams struct {
	ID    int32
	Limit int32
}

func (q *Queries) ListAllLists(ctx context.Context, arg ListAllListsParams) ([]Allowlist, error) {
	rows, err := q.db.Query(ctx, listAllLists, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Allowlist
	for rows.Next() {
		var i Allowlist
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntriesForAllowList = `-- name: ListEntriesForAllowList :many
SELECT id, cidr, list_id
FROM allowlist_entry 
WHERE 1=1
AND list_id = $1
ORDER BY cidr
`

func (q *Queries) ListEntriesForAllowList(ctx context.Context, listID int32) ([]AllowlistEntry, error) {
	rows, err := q.db.Query(ctx, listEntriesForAllowList, listID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllowlistEntry
	for rows.Next() {
		var i AllowlistEntry
		if err := rows.Scan(&i.ID, &i.Cidr, &i.ListID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFromAllowlist = `-- name: RemoveFromAllowlist :exec
DELETE FROM allowlist_entry 
WHERE 1=1
AND id = $1 
AND list_id = $2
`

type RemoveFromAllowlistParams struct {
	ID     int32
	ListID int32
}

func (q *Queries) RemoveFromAllowlist(ctx context.Context, arg RemoveFromAllowlistParams) error {
	_, err := q.db.Exec(ctx, removeFromAllowlist, arg.ID, arg.ListID)
	return err
}
