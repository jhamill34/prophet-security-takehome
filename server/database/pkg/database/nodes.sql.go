// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: nodes.sql

package database

import (
	"context"
)

const listAllExistingNodes = `-- name: ListAllExistingNodes :many
SELECT DISTINCT n.ip_addr
FROM nodes n
INNER JOIN sources s ON s.id = n.source_id
WHERE s.version < n.version and (n.ip_addr > $1)
ORDER BY n.ip_addr
LIMIT $2
`

type ListAllExistingNodesParams struct {
	IpAddr string
	Limit  int32
}

func (q *Queries) ListAllExistingNodes(ctx context.Context, arg ListAllExistingNodesParams) ([]string, error) {
	rows, err := q.db.Query(ctx, listAllExistingNodes, arg.IpAddr, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var ip_addr string
		if err := rows.Scan(&ip_addr); err != nil {
			return nil, err
		}
		items = append(items, ip_addr)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
