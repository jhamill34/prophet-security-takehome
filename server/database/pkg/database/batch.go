// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: batch.go

package database

import (
	"context"
	"errors"
	"net/netip"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const batchInsertNodes = `-- name: BatchInsertNodes :batchexec
INSERT INTO nodes (ip_addr, source_id, version) 
VALUES ($1, $2, $3) 
ON CONFLICT(ip_addr, source_id) 
DO UPDATE 
SET version = EXCLUDED.version
`

type BatchInsertNodesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchInsertNodesParams struct {
	IpAddr   netip.Addr
	SourceID int32
	Version  pgtype.Int8
}

func (q *Queries) BatchInsertNodes(ctx context.Context, arg []BatchInsertNodesParams) *BatchInsertNodesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.IpAddr,
			a.SourceID,
			a.Version,
		}
		batch.Queue(batchInsertNodes, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchInsertNodesBatchResults{br, len(arg), false}
}

func (b *BatchInsertNodesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BatchInsertNodesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
